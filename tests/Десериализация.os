// BSLLS:DuplicateStringLiteral-off
// BSLLS:MagicNumber-off
#Использовать ".."
#Использовать "."
#Использовать asserts

&Тест
Процедура ДесериализоватьПростойОбъект() Экспорт
	
	// Дано
	Строка = "
	|{
	|	""number"": 1,
	|	""Строка"": ""значение"",
	|	""Массив"": [1, 2],
	|	""Структура"": {
	|		""Поле1"": ""значение1"",
	|		""Поле2"": ""значение2""
	|	},
	|	""Ссылка"": {
	|		""number"": 2
	|	}
	|}";
	
	ДесериализаторJson = Новый ДесериализаторJson();

	// Когда
	Объект = ДесериализаторJson.Десериализовать(Строка, Тип("ТестовыйКласс"));

	// Тогда
	Ожидаем.Что(Объект).ИмеетТип("ТестовыйКласс");
	Ожидаем.Что(Объект.Число).Равно(1);
	Ожидаем.Что(Объект.Строка).Равно("значение");

	Ожидаем.Что(Объект.Массив).ИмеетТип("Массив");
	Ожидаем.Что(Объект.Массив).ИмеетДлину(2);
	Ожидаем.Что(Объект.Массив[0]).Равно(1);
	Ожидаем.Что(Объект.Массив[1]).Равно(2);

	Ожидаем.Что(Объект.Структура).ИмеетТип("Структура");
	Ожидаем.Что(Объект.Структура.Поле1).Равно("значение1");
	Ожидаем.Что(Объект.Структура.Поле2).Равно("значение2");

	Ожидаем.Что(Объект.Ссылка).ИмеетТип("ТестовыйКласс");
	Ожидаем.Что(Объект.Ссылка.Число).Равно(2);

КонецПроцедуры
