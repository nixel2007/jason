#Использовать annotations
#Использовать logos
#Использовать collectionos

#Область ОписаниеПеременных

&Лог
Перем Лог;

// Рефлектор
Перем Рефлектор;
// Множество
Перем КэшИзвестныхТипов;
// Массив
Перем ПримитивныеТипы;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция Сериализовать(Объект) Экспорт
	ОбъектСериализации = ПреобразоватьОбъектСериализации(Объект);

	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, ОбъектСериализации);

	Возврат Запись.Закрыть();
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПреобразоватьОбъектСериализации(Объект)

	ТипОбъекта = ТипЗнч(Объект);
	
	// TODO: Судя так и просится соответствие Тип -> Сериализатор/функция сериализации
	Если ТипОбъекта = Тип("Массив") Тогда
		Результат = ПреобразоватьМассив(Объект);
	ИначеЕсли ТипОбъекта = Тип("Структура") ИЛИ ТипОбъекта = Тип("Соответствие") Тогда
		Результат = ПреобразоватьСтруктуру(Объект);
	ИначеЕсли ЭтоПримитивныйТип(ТипОбъекта) Тогда
		Результат = ПреобразоватьПримитивныйТип(Объект);
	Иначе
		Результат = ПреобразоватьКомплексныйТип(Объект);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ЭтоПримитивныйТип(ТипОбъекта)
	Возврат ПримитивныеТипы.Содержит(ТипОбъекта);
КонецФункции

Функция ПреобразоватьМассив(Массив)
	Результат = Новый Массив;

	Для Каждого Элемент Из Массив Цикл
		ПреобразованныйЭлемент = ПреобразоватьОбъектСериализации(Элемент);
		Результат.Добавить(ПреобразованныйЭлемент);
	КонецЦикла;
		
	Возврат Результат;
КонецФункции

Функция ПреобразоватьСтруктуру(Структура) Экспорт
	Результат = Новый Соответствие();

	Для Каждого Элемент Из Структура Цикл
		ПреобразованноеЗначение = ПреобразоватьОбъектСериализации(Элемент.Значение);
		Результат.Вставить(Элемент.Ключ, ПреобразованноеЗначение);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ПреобразоватьПримитивныйТип(Объект) Экспорт
	Возврат Объект;
КонецФункции

Функция ПреобразоватьКомплексныйТип(Объект) Экспорт

	ТипОбъекта = ТипЗнч(Объект);

	ЭтоПользовательскийТип = КэшИзвестныхТипов.Содержит(ТипОбъекта);

	Если НЕ ЭтоПользовательскийТип Тогда
		Лог.Предупреждение("Неизвестный тип объекта для преобразования: %1", ТипОбъекта);
		Возврат Неопределено;
	КонецЕсли;

	Результат = Новый Соответствие();

	СвойстваОбъекта = Рефлектор.ПолучитьТаблицуСвойств(ТипОбъекта, Истина);
	
	Для Каждого СвойствоОбъекта Из СвойстваОбъекта Цикл
		// Проверяем, не помечено ли поле как несериализуемое
		Несериализуемое = РаботаСАннотациями.НайтиАннотацию(СвойствоОбъекта.Аннотации, "Несериализуемое");
		Если Несериализуемое <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Обязательное = Ложь;
		ИмяСвойства = СвойствоОбъекта.Имя;
		СериализуемоеСвойство = РаботаСАннотациями.НайтиАннотацию(СвойствоОбъекта.Аннотации, "Сериализуемое");
		Если СериализуемоеСвойство <> Неопределено Тогда
			ИмяСвойства = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(СериализуемоеСвойство, "Значение", СвойствоОбъекта.Имя);
			Обязательное = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(СериализуемоеСвойство, "Обязательное", Обязательное);
		КонецЕсли;
		
		ЗначениеСвойства = Рефлектор.ПолучитьСвойство(Объект, СвойствоОбъекта.Имя);
		ЗначениеСвойства = ПреобразоватьОбъектСериализации(ЗначениеСвойства);
		Если Обязательное ИЛИ ЗначениеСвойства <> Неопределено Тогда
			Результат.Вставить(ИмяСвойства, ЗначениеСвойства);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

Процедура ПриСозданииОбъекта()
	
	Рефлектор = Новый Рефлектор();
	Лог = Логирование.ПолучитьЛог("oscript.lib.jason.СериализаторJson");
	
	КэшИзвестныхТипов = Новый МножествоСоответствие;
	ИзвестныеТипы = Рефлектор.ИзвестныеТипы(Новый Структура("Пользовательский", Истина));
	Для Каждого ИзвестныйТип Из ИзвестныеТипы Цикл
		КэшИзвестныхТипов.Добавить(ИзвестныйТип.Значение);
	КонецЦикла;

	ПримитивныеТипы = Новый МножествоСоответствие;
	ПримитивныеТипы.Добавить(Тип("Строка"));
	ПримитивныеТипы.Добавить(Тип("Булево"));
	ПримитивныеТипы.Добавить(Тип("Дата"));
	ПримитивныеТипы.Добавить(Тип("Число"));
	ПримитивныеТипы.Добавить(Тип("Null"));
	ПримитивныеТипы.Добавить(Тип("Неопределено"));

КонецПроцедуры
